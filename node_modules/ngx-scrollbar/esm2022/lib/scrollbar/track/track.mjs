import { Directive } from '@angular/core';
import { coerceNumberProperty } from '@angular/cdk/coercion';
import { EMPTY, fromEvent, merge, of } from 'rxjs';
import { map, pluck, switchMap, tap } from 'rxjs/operators';
import { preventSelection, enableSelection, stopPropagation } from '../common';
import * as i0 from "@angular/core";
import * as i1 from "../../ng-scrollbar-base";
// @dynamic
export class TrackAdapter {
    // Stream that emits when the track element is clicked
    get clicked() {
        const mouseDown = fromEvent(this.trackElement, 'mousedown', { passive: true }).pipe(stopPropagation(), preventSelection(this.document));
        const mouseup = fromEvent(this.document, 'mouseup', { passive: true }).pipe(stopPropagation(), enableSelection(this.document), switchMap(() => EMPTY));
        return merge(mouseDown, mouseup);
    }
    // Get track client rect
    get clientRect() {
        return this.trackElement.getBoundingClientRect();
    }
    constructor(cmp, trackElement, document) {
        this.cmp = cmp;
        this.trackElement = trackElement;
        this.document = document;
    }
    /**
     * Stream that emits when scrollbar track is clicked
     */
    onTrackClicked(e, thumbSize, scrollSize) {
        return of(e).pipe(pluck(this.pageProperty), 
        // Calculate scrollTo position
        map((pageOffset) => {
            const clickOffset = pageOffset - this.offset;
            const offset = clickOffset - (thumbSize / 2);
            const ratio = offset / this.size;
            return ratio * scrollSize;
        }), 
        // Smooth scroll to position
        tap((value) => {
            this.cmp.scrollTo({
                ...this.mapToScrollToOption(value),
                duration: coerceNumberProperty(this.cmp.trackClickScrollDuration)
            });
        }));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: TrackAdapter, deps: [{ token: i1.NgScrollbarBase }, { token: HTMLElement }, { token: Document }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.2", type: TrackAdapter, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: TrackAdapter, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i1.NgScrollbarBase }, { type: HTMLElement }, { type: Document }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtc2Nyb2xsYmFyL3NyYy9saWIvc2Nyb2xsYmFyL3RyYWNrL3RyYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDMUMsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDN0QsT0FBTyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMvRCxPQUFPLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDNUQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLGVBQWUsRUFBRSxlQUFlLEVBQUUsTUFBTSxXQUFXLENBQUM7OztBQUcvRSxXQUFXO0FBRVgsTUFBTSxPQUFnQixZQUFZO0lBRWhDLHNEQUFzRDtJQUN0RCxJQUFJLE9BQU87UUFDVCxNQUFNLFNBQVMsR0FBRyxTQUFTLENBQWEsSUFBSSxDQUFDLFlBQVksRUFBRSxXQUFXLEVBQUUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQzdGLGVBQWUsRUFBRSxFQUNqQixnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQ2hDLENBQUM7UUFDRixNQUFNLE9BQU8sR0FBRyxTQUFTLENBQWEsSUFBSSxDQUFDLFFBQVEsRUFBRSxTQUFTLEVBQUUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQ3JGLGVBQWUsRUFBRSxFQUNqQixlQUFlLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUM5QixTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQ3ZCLENBQUM7UUFDRixPQUFPLEtBQUssQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQVdELHdCQUF3QjtJQUN4QixJQUFJLFVBQVU7UUFDWixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMscUJBQXFCLEVBQUUsQ0FBQztJQUNuRCxDQUFDO0lBRUQsWUFBZ0MsR0FBb0IsRUFDcEIsWUFBeUIsRUFDekIsUUFBa0I7UUFGbEIsUUFBRyxHQUFILEdBQUcsQ0FBaUI7UUFDcEIsaUJBQVksR0FBWixZQUFZLENBQWE7UUFDekIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtJQUNsRCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxjQUFjLENBQUMsQ0FBYSxFQUFFLFNBQWlCLEVBQUUsVUFBa0I7UUFDakUsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUNmLEtBQUssQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDO1FBQ3hCLDhCQUE4QjtRQUM5QixHQUFHLENBQUMsQ0FBQyxVQUFrQixFQUFFLEVBQUU7WUFDekIsTUFBTSxXQUFXLEdBQUcsVUFBVSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7WUFDN0MsTUFBTSxNQUFNLEdBQUcsV0FBVyxHQUFHLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQzdDLE1BQU0sS0FBSyxHQUFHLE1BQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQ2pDLE9BQU8sS0FBSyxHQUFHLFVBQVUsQ0FBQztRQUM1QixDQUFDLENBQUM7UUFDRiw0QkFBNEI7UUFDNUIsR0FBRyxDQUFDLENBQUMsS0FBYSxFQUFFLEVBQUU7WUFDcEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUM7Z0JBQ2hCLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQztnQkFDbEMsUUFBUSxFQUFFLG9CQUFvQixDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsd0JBQXdCLENBQUM7YUFDbEUsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7OEdBeERtQixZQUFZO2tHQUFaLFlBQVk7OzJGQUFaLFlBQVk7a0JBRGpDLFNBQVMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgY29lcmNlTnVtYmVyUHJvcGVydHkgfSBmcm9tICdAYW5ndWxhci9jZGsvY29lcmNpb24nO1xyXG5pbXBvcnQgeyBFTVBUWSwgZnJvbUV2ZW50LCBtZXJnZSwgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgbWFwLCBwbHVjaywgc3dpdGNoTWFwLCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IHByZXZlbnRTZWxlY3Rpb24sIGVuYWJsZVNlbGVjdGlvbiwgc3RvcFByb3BhZ2F0aW9uIH0gZnJvbSAnLi4vY29tbW9uJztcclxuaW1wb3J0IHsgTmdTY3JvbGxiYXJCYXNlIH0gZnJvbSAnLi4vLi4vbmctc2Nyb2xsYmFyLWJhc2UnO1xyXG5cclxuLy8gQGR5bmFtaWNcclxuQERpcmVjdGl2ZSgpXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBUcmFja0FkYXB0ZXIge1xyXG5cclxuICAvLyBTdHJlYW0gdGhhdCBlbWl0cyB3aGVuIHRoZSB0cmFjayBlbGVtZW50IGlzIGNsaWNrZWRcclxuICBnZXQgY2xpY2tlZCgpOiBPYnNlcnZhYmxlPE1vdXNlRXZlbnQ+IHtcclxuICAgIGNvbnN0IG1vdXNlRG93biA9IGZyb21FdmVudDxNb3VzZUV2ZW50Pih0aGlzLnRyYWNrRWxlbWVudCwgJ21vdXNlZG93bicsIHsgcGFzc2l2ZTogdHJ1ZSB9KS5waXBlKFxyXG4gICAgICBzdG9wUHJvcGFnYXRpb24oKSxcclxuICAgICAgcHJldmVudFNlbGVjdGlvbih0aGlzLmRvY3VtZW50KVxyXG4gICAgKTtcclxuICAgIGNvbnN0IG1vdXNldXAgPSBmcm9tRXZlbnQ8TW91c2VFdmVudD4odGhpcy5kb2N1bWVudCwgJ21vdXNldXAnLCB7IHBhc3NpdmU6IHRydWUgfSkucGlwZShcclxuICAgICAgc3RvcFByb3BhZ2F0aW9uKCksXHJcbiAgICAgIGVuYWJsZVNlbGVjdGlvbih0aGlzLmRvY3VtZW50KSxcclxuICAgICAgc3dpdGNoTWFwKCgpID0+IEVNUFRZKVxyXG4gICAgKTtcclxuICAgIHJldHVybiBtZXJnZShtb3VzZURvd24sIG1vdXNldXApO1xyXG4gIH1cclxuXHJcbiAgLy8gUmV0dXJucyBlaXRoZXIgJ3BhZ2VYJyBvciAncGFnZVknIGFjY29yZGluZyB0byBzY3JvbGxiYXIgYXhpc1xyXG4gIGFic3RyYWN0IGdldCBwYWdlUHJvcGVydHkoKTogc3RyaW5nO1xyXG5cclxuICAvLyBSZXR1cm5zIHRoZSB0cmFjayBzaXplLCBjbGllbnRIZWlnaHQgb3IgY2xpZW50V2lkdGhcclxuICBhYnN0cmFjdCBnZXQgc2l6ZSgpOiBudW1iZXI7XHJcblxyXG4gIC8vIFJldHVybnMgdGhlIHN0YXJ0IG9mZnNldCBlaXRoZXIgJ2NsaWVudFJlY3QudG9wJyBvciAnY2xpZW50UmVjdC5sZWZ0J1xyXG4gIGFic3RyYWN0IGdldCBvZmZzZXQoKTogbnVtYmVyO1xyXG5cclxuICAvLyBHZXQgdHJhY2sgY2xpZW50IHJlY3RcclxuICBnZXQgY2xpZW50UmVjdCgpOiBET01SZWN0IHtcclxuICAgIHJldHVybiB0aGlzLnRyYWNrRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgY21wOiBOZ1Njcm9sbGJhckJhc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3RlY3RlZCB0cmFja0VsZW1lbnQ6IEhUTUxFbGVtZW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm90ZWN0ZWQgZG9jdW1lbnQ6IERvY3VtZW50KSB7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTdHJlYW0gdGhhdCBlbWl0cyB3aGVuIHNjcm9sbGJhciB0cmFjayBpcyBjbGlja2VkXHJcbiAgICovXHJcbiAgb25UcmFja0NsaWNrZWQoZTogTW91c2VFdmVudCwgdGh1bWJTaXplOiBudW1iZXIsIHNjcm9sbFNpemU6IG51bWJlcik6IE9ic2VydmFibGU8bnVtYmVyPiB7XHJcbiAgICByZXR1cm4gb2YoZSkucGlwZShcclxuICAgICAgcGx1Y2sodGhpcy5wYWdlUHJvcGVydHkpLFxyXG4gICAgICAvLyBDYWxjdWxhdGUgc2Nyb2xsVG8gcG9zaXRpb25cclxuICAgICAgbWFwKChwYWdlT2Zmc2V0OiBudW1iZXIpID0+IHtcclxuICAgICAgICBjb25zdCBjbGlja09mZnNldCA9IHBhZ2VPZmZzZXQgLSB0aGlzLm9mZnNldDtcclxuICAgICAgICBjb25zdCBvZmZzZXQgPSBjbGlja09mZnNldCAtICh0aHVtYlNpemUgLyAyKTtcclxuICAgICAgICBjb25zdCByYXRpbyA9IG9mZnNldCAvIHRoaXMuc2l6ZTtcclxuICAgICAgICByZXR1cm4gcmF0aW8gKiBzY3JvbGxTaXplO1xyXG4gICAgICB9KSxcclxuICAgICAgLy8gU21vb3RoIHNjcm9sbCB0byBwb3NpdGlvblxyXG4gICAgICB0YXAoKHZhbHVlOiBudW1iZXIpID0+IHtcclxuICAgICAgICB0aGlzLmNtcC5zY3JvbGxUbyh7XHJcbiAgICAgICAgICAuLi50aGlzLm1hcFRvU2Nyb2xsVG9PcHRpb24odmFsdWUpLFxyXG4gICAgICAgICAgZHVyYXRpb246IGNvZXJjZU51bWJlclByb3BlcnR5KHRoaXMuY21wLnRyYWNrQ2xpY2tTY3JvbGxEdXJhdGlvbilcclxuICAgICAgICB9KTtcclxuICAgICAgfSlcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgYWJzdHJhY3QgbWFwVG9TY3JvbGxUb09wdGlvbih2YWx1ZTogbnVtYmVyKTogU2Nyb2xsVG9PcHRpb25zO1xyXG59XHJcbiJdfQ==