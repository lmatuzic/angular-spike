import { Directive, Inject } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { TrackAdapter } from './track';
import * as i0 from "@angular/core";
import * as i1 from "../../ng-scrollbar-base";
export class TrackXDirective extends TrackAdapter {
    get pageProperty() {
        return 'pageX';
    }
    get offset() {
        return this.clientRect.left;
    }
    get size() {
        return this.trackElement.clientWidth;
    }
    constructor(cmp, trackElement, document) {
        super(cmp, trackElement.nativeElement, document);
        this.cmp = cmp;
        this.document = document;
    }
    mapToScrollToOption(value) {
        return { left: value };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: TrackXDirective, deps: [{ token: i1.NgScrollbarBase }, { token: i0.ElementRef }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.2", type: TrackXDirective, selector: "[scrollbarTrackX]", usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: TrackXDirective, decorators: [{
            type: Directive,
            args: [{ selector: '[scrollbarTrackX]' }]
        }], ctorParameters: function () { return [{ type: i1.NgScrollbarBase }, { type: i0.ElementRef }, { type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; } });
export class TrackYDirective extends TrackAdapter {
    get pageProperty() {
        return 'pageY';
    }
    get offset() {
        return this.clientRect.top;
    }
    get size() {
        return this.trackElement.clientHeight;
    }
    constructor(cmp, trackElement, document) {
        super(cmp, trackElement.nativeElement, document);
        this.cmp = cmp;
        this.document = document;
    }
    mapToScrollToOption(value) {
        return { top: value };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: TrackYDirective, deps: [{ token: i1.NgScrollbarBase }, { token: i0.ElementRef }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.2", type: TrackYDirective, selector: "[scrollbarTrackY]", usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: TrackYDirective, decorators: [{
            type: Directive,
            args: [{ selector: '[scrollbarTrackY]' }]
        }], ctorParameters: function () { return [{ type: i1.NgScrollbarBase }, { type: i0.ElementRef }, { type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhY2suZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LXNjcm9sbGJhci9zcmMvbGliL3Njcm9sbGJhci90cmFjay90cmFjay5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBYyxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxTQUFTLENBQUM7OztBQUl2QyxNQUFNLE9BQU8sZUFBZ0IsU0FBUSxZQUFZO0lBRS9DLElBQUksWUFBWTtRQUNkLE9BQU8sT0FBTyxDQUFDO0lBQ2pCLENBQUM7SUFFRCxJQUFJLE1BQU07UUFDUixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDO0lBQzlCLENBQUM7SUFFRCxJQUFJLElBQUk7UUFDTixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDO0lBQ3ZDLENBQUM7SUFFRCxZQUFzQixHQUFvQixFQUFFLFlBQXdCLEVBQThCLFFBQWtCO1FBQ2xILEtBQUssQ0FBQyxHQUFHLEVBQUUsWUFBWSxDQUFDLGFBQWEsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUQ3QixRQUFHLEdBQUgsR0FBRyxDQUFpQjtRQUF3RCxhQUFRLEdBQVIsUUFBUSxDQUFVO0lBRXBILENBQUM7SUFFUyxtQkFBbUIsQ0FBQyxLQUFhO1FBQ3pDLE9BQU8sRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLENBQUM7SUFDekIsQ0FBQzs4R0FwQlUsZUFBZSwyRUFjb0QsUUFBUTtrR0FkM0UsZUFBZTs7MkZBQWYsZUFBZTtrQkFEM0IsU0FBUzttQkFBQyxFQUFFLFFBQVEsRUFBRSxtQkFBbUIsRUFBRTs7MEJBZTZCLE1BQU07MkJBQUMsUUFBUTs7QUFVeEYsTUFBTSxPQUFPLGVBQWdCLFNBQVEsWUFBWTtJQUUvQyxJQUFJLFlBQVk7UUFDZCxPQUFPLE9BQU8sQ0FBQztJQUNqQixDQUFDO0lBRUQsSUFBSSxNQUFNO1FBQ1IsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQztJQUM3QixDQUFDO0lBRUQsSUFBSSxJQUFJO1FBQ04sT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQztJQUN4QyxDQUFDO0lBRUQsWUFBc0IsR0FBb0IsRUFBRSxZQUF3QixFQUE4QixRQUFrQjtRQUNsSCxLQUFLLENBQUMsR0FBRyxFQUFFLFlBQVksQ0FBQyxhQUFhLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFEN0IsUUFBRyxHQUFILEdBQUcsQ0FBaUI7UUFBd0QsYUFBUSxHQUFSLFFBQVEsQ0FBVTtJQUVwSCxDQUFDO0lBRVMsbUJBQW1CLENBQUMsS0FBYTtRQUN6QyxPQUFPLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxDQUFDO0lBQ3hCLENBQUM7OEdBcEJVLGVBQWUsMkVBY29ELFFBQVE7a0dBZDNFLGVBQWU7OzJGQUFmLGVBQWU7a0JBRDNCLFNBQVM7bUJBQUMsRUFBRSxRQUFRLEVBQUUsbUJBQW1CLEVBQUU7OzBCQWU2QixNQUFNOzJCQUFDLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBET0NVTUVOVCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcbmltcG9ydCB7IFRyYWNrQWRhcHRlciB9IGZyb20gJy4vdHJhY2snO1xyXG5pbXBvcnQgeyBOZ1Njcm9sbGJhckJhc2UgfSBmcm9tICcuLi8uLi9uZy1zY3JvbGxiYXItYmFzZSc7XHJcblxyXG5ARGlyZWN0aXZlKHsgc2VsZWN0b3I6ICdbc2Nyb2xsYmFyVHJhY2tYXScgfSlcclxuZXhwb3J0IGNsYXNzIFRyYWNrWERpcmVjdGl2ZSBleHRlbmRzIFRyYWNrQWRhcHRlciB7XHJcblxyXG4gIGdldCBwYWdlUHJvcGVydHkoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiAncGFnZVgnO1xyXG4gIH1cclxuXHJcbiAgZ2V0IG9mZnNldCgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuY2xpZW50UmVjdC5sZWZ0O1xyXG4gIH1cclxuXHJcbiAgZ2V0IHNpemUoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLnRyYWNrRWxlbWVudC5jbGllbnRXaWR0aDtcclxuICB9XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBjbXA6IE5nU2Nyb2xsYmFyQmFzZSwgdHJhY2tFbGVtZW50OiBFbGVtZW50UmVmLCBASW5qZWN0KERPQ1VNRU5UKSBwcm90ZWN0ZWQgZG9jdW1lbnQ6IERvY3VtZW50KSB7XHJcbiAgICBzdXBlcihjbXAsIHRyYWNrRWxlbWVudC5uYXRpdmVFbGVtZW50LCBkb2N1bWVudCk7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgbWFwVG9TY3JvbGxUb09wdGlvbih2YWx1ZTogbnVtYmVyKTogU2Nyb2xsVG9PcHRpb25zIHtcclxuICAgIHJldHVybiB7IGxlZnQ6IHZhbHVlIH07XHJcbiAgfVxyXG59XHJcblxyXG5ARGlyZWN0aXZlKHsgc2VsZWN0b3I6ICdbc2Nyb2xsYmFyVHJhY2tZXScgfSlcclxuZXhwb3J0IGNsYXNzIFRyYWNrWURpcmVjdGl2ZSBleHRlbmRzIFRyYWNrQWRhcHRlciB7XHJcblxyXG4gIGdldCBwYWdlUHJvcGVydHkoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiAncGFnZVknO1xyXG4gIH1cclxuXHJcbiAgZ2V0IG9mZnNldCgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuY2xpZW50UmVjdC50b3A7XHJcbiAgfVxyXG5cclxuICBnZXQgc2l6ZSgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMudHJhY2tFbGVtZW50LmNsaWVudEhlaWdodDtcclxuICB9XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBjbXA6IE5nU2Nyb2xsYmFyQmFzZSwgdHJhY2tFbGVtZW50OiBFbGVtZW50UmVmLCBASW5qZWN0KERPQ1VNRU5UKSBwcm90ZWN0ZWQgZG9jdW1lbnQ6IERvY3VtZW50KSB7XHJcbiAgICBzdXBlcihjbXAsIHRyYWNrRWxlbWVudC5uYXRpdmVFbGVtZW50LCBkb2N1bWVudCk7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgbWFwVG9TY3JvbGxUb09wdGlvbih2YWx1ZTogbnVtYmVyKTogU2Nyb2xsVG9PcHRpb25zIHtcclxuICAgIHJldHVybiB7IHRvcDogdmFsdWUgfTtcclxuICB9XHJcbn1cclxuIl19