import { Output, Directive } from '@angular/core';
import { animationFrameScheduler, of, fromEvent, Subject } from 'rxjs';
import { distinctUntilChanged, map, mergeMap, pluck, takeUntil, tap } from 'rxjs/operators';
import { enableSelection, preventSelection, stopPropagation } from '../common';
import * as i0 from "@angular/core";
import * as i1 from "../../ng-scrollbar-base";
import * as i2 from "../track/track";
// @dynamic
export class ThumbAdapter {
    get trackMax() {
        return this.track.size - this.size;
    }
    // Get thumb client rect
    get clientRect() {
        return this.thumbElement.getBoundingClientRect();
    }
    // Stream that emits when scrollbar thumb is clicked
    get clicked() {
        return fromEvent(this.thumbElement, 'mousedown', { passive: true }).pipe(stopPropagation());
    }
    constructor(cmp, track, thumbElement, document) {
        this.cmp = cmp;
        this.track = track;
        this.thumbElement = thumbElement;
        this.document = document;
        // Stream that emits dragging state
        this._dragging = new Subject();
        this.dragging = this._dragging.pipe(distinctUntilChanged());
    }
    // Calculate and update thumb position and size
    update() {
        const size = calculateThumbSize(this.track.size, this.viewportScrollSize, this.cmp.minThumbSize);
        const position = calculateThumbPosition(this.viewportScrollOffset, this.viewportScrollMax, this.trackMax);
        animationFrameScheduler.schedule(() => this.updateStyles(this.handleDirection(position, this.trackMax), size));
    }
    /**
     * Stream that emits the 'scrollTo' position when a scrollbar thumb element is dragged
     * This function is called by thumb drag event using viewport or scrollbar pointer events
     */
    dragged(event) {
        let trackMaxStart;
        let scrollMaxStart;
        const dragStart = of(event).pipe(preventSelection(this.document), tap(() => {
            // Capture scrollMax and trackMax once
            trackMaxStart = this.trackMax;
            scrollMaxStart = this.viewportScrollMax;
            this.setDragging(true);
        }));
        const dragging = fromEvent(this.document, 'mousemove', { capture: true, passive: true }).pipe(stopPropagation());
        const dragEnd = fromEvent(this.document, 'mouseup', { capture: true }).pipe(stopPropagation(), enableSelection(this.document), tap(() => this.setDragging(false)));
        return dragStart.pipe(pluck(this.pageProperty), map((pageOffset) => pageOffset - this.dragStartOffset), mergeMap((mouseDownOffset) => dragging.pipe(pluck(this.clientProperty), 
        // Calculate how far the pointer is from the top/left of the scrollbar (minus the dragOffset).
        map((mouseOffset) => mouseOffset - this.track.offset), map((offset) => scrollMaxStart * (offset - mouseDownOffset) / trackMaxStart), map((position) => this.handleDrag(position, scrollMaxStart)), tap((position) => this.scrollTo(position)), takeUntil(dragEnd))));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: ThumbAdapter, deps: [{ token: i1.NgScrollbarBase }, { token: i2.TrackAdapter }, { token: HTMLElement }, { token: Document }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.2", type: ThumbAdapter, outputs: { dragging: "dragging" }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: ThumbAdapter, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i1.NgScrollbarBase }, { type: i2.TrackAdapter }, { type: HTMLElement }, { type: Document }]; }, propDecorators: { dragging: [{
                type: Output
            }] } });
/**
 * Calculate scrollbar thumb size
 */
function calculateThumbSize(trackSize, contentSize, minThumbSize) {
    const scrollbarRatio = trackSize / contentSize;
    const thumbSize = scrollbarRatio * trackSize;
    return Math.max(~~thumbSize, minThumbSize);
}
/**
 * Calculate scrollbar thumb position
 */
function calculateThumbPosition(scrollPosition, scrollMax, trackMax) {
    return scrollPosition * trackMax / scrollMax;
}
//# sourceMappingURL=data:application/json;base64,